/**
 * angular-schema-form-nwp-file-upload - Upload file type for Angular Schema Form
 * @version v0.1.5
 * @link https://github.com/saburab/angular-schema-form-nwp-file-upload
 * @license MIT
 */
"use strict";angular.module("schemaForm").config(["schemaFormProvider","schemaFormDecoratorsProvider","sfPathProvider",function(e,i,a){var n="Wrong file type. Allowed types are ",r="This file is too large. Maximum size allowed is ",t="Current file size:",l="You have to upload at least one file",s="You can't upload more than one file.",o=function(i,o,m){if("array"===o.type&&"singlefile"===o.format){o.pattern&&o.pattern.mimeType&&!o.pattern.validationMessage&&(o.pattern.validationMessage=n),o.maxSize&&o.maxSize.maximum&&!o.maxSize.validationMessage&&(o.maxSize.validationMessage=r,o.maxSize.validationMessage2=t),o.minItems&&!o.minItemsValidationMessage&&(o.minItemsValidationMessage=l),o.maxItems&&!o.maxItemsValidationMessage&&(o.maxItemsValidationMessage=s);var d=e.stdFormObj(i,o,m);return d.key=m.path,d.type="nwpFileUpload",m.lookup[a.stringify(m.path)]=d,d}};e.defaults.array.unshift(o);var m=function(i,o,m){if("array"===o.type&&"multifile"===o.format){o.pattern&&o.pattern.mimeType&&!o.pattern.validationMessage&&(o.pattern.validationMessage=n),o.maxSize&&o.maxSize.maximum&&!o.maxSize.validationMessage&&(o.maxSize.validationMessage=r,o.maxSize.validationMessage2=t),o.minItems&&!o.minItemsValidationMessage&&(o.minItemsValidationMessage=l),o.maxItems&&!o.maxItemsValidationMessage&&(o.maxItemsValidationMessage=s);var d=e.stdFormObj(i,o,m);return d.key=m.path,d.type="nwpFileUpload",m.lookup[a.stringify(m.path)]=d,d}};e.defaults.array.unshift(m),i.addMapping("bootstrapDecorator","nwpFileUpload","directives/decorators/bootstrap/nwp-file/nwp-file.html")}]),angular.module("schemaForm").directive("ngFileCountValidator",[function(){return{restrict:"A",require:"ngModel",link:function(e,i,a,n){var r=!e.form.schema.maxItems||(e.model.images?e.model.images.length:0)<e.form.schema.maxItems;n.$parsers.unshift(function(e){return n.$setValidity("ngFileCountValidator",r),r?e:void 0}),n.$formatters.unshift(function(e){return n.$setValidity("ngFileCountValidator",r),r?e:void 0})}}}]),angular.module("ngSchemaFormFile",["ngFileUpload","ngMessages"]).directive("ngSchemaFile",["Upload","CookieService","ConfigService","$timeout","$q",function(e,i,a,n,r){return{restrict:"A",scope:!0,require:"ngModel",link:function(r,t,l,s){function o(i,a,t){(r.model.images?r.model.images.length:0)+1>r.form.schema.maxItems&&(r.uploadForm.$error.maxItems=!0,i.$error="maxItems",i.$errorParam=(r.model.images?r.model.images.length:0)+1+". Datei, "+r.form.schema.maxItems+" Dateien erlaubt."),i&&!i.$error&&r.url&&(i.upload=e.upload({url:r.url,file:i,data:{schemaId:t,path:r.form.path},headers:{"X-Archibald-Token":a}}),i.upload.then(function(e){if(n(function(){i.result=e.data}),s.$viewValue){var a=!1;s.$viewValue.forEach(function(i){i.filename==e.data.filename&&(a=!0)}),a||s.$viewValue.push(e.data)}else s.$setViewValue([e.data]);s.$commitViewValue(),n(function(){r.picFiles.forEach(function(e){i.blobUrl==e.blobUrl&&r.picFiles.splice(r.picFiles.indexOf(e),1),r.uploadForm.$setDirty()})})},function(e){e.status>0&&(r.errorMsg=e.status+": "+e.data)}),i.upload.progress(function(e){i.progress=Math.min(100,parseInt(100*e.loaded/e.total))}))}r.url=a.getFileUrl();var m=i.getToken();r.isSinglefileUpload=r.form&&r.form.schema&&"singlefile"===r.form.schema.format,r.selectFile=function(e){r.picFile=e},r.selectFiles=function(e){r.picFiles=e},r.uploadFile=function(e,i){e&&o(e,m,i)},r.uploadFiles=function(e,i){e.length&&angular.forEach(e,function(e){o(e,m,i)})},r.deleteFile=function(e){var i=[];s.$viewValue.forEach(function(a){a!=e&&i.push(a)}),s.$setViewValue(i),r.picFiles&&r.picFiles.forEach(function(e){"maxItems"==e.$error&&(delete e.$error,delete e.$errorParam)})}}}}]),angular.module("schemaForm").run(["$templateCache",function(e){e.put("directives/decorators/bootstrap/nwp-file/nwp-file.html",'<ng-form sf-array="form" class="{{form.htmlClass}} file-upload mb-lg" ng-schema-file ng-file-count-validator ng-model="$$value$$" name="uploadForm">\n  <label ng-show="form.title && form.notitle !== true" class="control-label" for="fileInputButton" ng-class="{\'sr-only\': !showTitle(), \'text-danger\': uploadForm.$error.required && !uploadForm.$pristine}">\n    {{ form.title }}<i ng-show="form.required">&nbsp;*</i>\n  </label>\n\n  <div ng-repeat="file in $$value$$">\n    <div class="thumbnail-container">\n      <label><a href="{{url}}/download/{{file.filename}}/{{schema.id}}/{{file.path}}" download="{{file.originalname}}">{{file.originalname}}</a></label>\n      <!-- api call to get file preview from server -->\n      <img ng-src="{{url}}/preview/{{file.filename}}/{{schema.id}}/{{file.path}}" class="file-thumbnail">\n      <button type="button" class="btn btn-danger btn-xs" ng-click="deleteFile(file)">x</button>\n    </div>\n  </div>\n  <div class="clearfix"></div>\n\n  <div ng-show="picFile">\n    <div ng-include="\'uploadProcess.html\'" class="mb"></div>\n  </div>\n\n  <ul ng-show="picFiles && picFiles.length" class="list-group process-files">\n    <li class="list-group-item process-file" ng-repeat="picFile in picFiles">\n      <div ng-include="\'uploadProcess.html\'"></div>\n    </li>\n  </ul>\n\n  <div class="well well-sm bg-white mb" ng-class="{\'has-error border-danger\': (uploadForm.$error.required && !uploadForm.$pristine) || (hasError() && errorMessage(schemaError()))}">\n    <small class="text-muted" ng-show="form.description" ng-bind-html="form.description"></small>\n    <div ng-if="isSinglefileUpload" ng-include="\'singleFileUpload.html\'"></div>\n    <div ng-if="!isSinglefileUpload" ng-include="\'multiFileUpload.html\'"></div>\n    <div class="help-block mb0" ng-show="uploadForm.$error.required && !uploadForm.$pristine">{{ \'modules.attribute.fields.required.caption\' | translate }}</div>\n    <div class="help-block mb0" ng-show="(hasError() && errorMessage(schemaError()))" ng-bind-html="(hasError() && errorMessage(schemaError()))"></div>\n  </div>\n</ng-form>\n\n<script type=\'text/ng-template\' id="uploadProcess.html">\n  <div class="mb">\n    <div class="col-sm-4 mb-sm">\n      <label title="{{ \'modules.upload.field.preview\' | translate }}" class="text-info">{{\n        \'modules.upload.field.preview\' | translate }}</label>\n      <img ngf-src="picFile" class="img-thumbnail img-responsive">\n      <div class="img-placeholder"\n          ng-class="{\'show\': picFile.$invalid && !picFile.blobUrl, \'hide\': !picFile || picFile.blobUrl}">Keine Vorschau verf√ºgbar\n      </div>\n    </div>\n    <div class="col-sm-4 mb-sm">\n      <label title="{{ \'modules.upload.field.filename\' | translate }}" class="text-info">{{\n        \'modules.upload.field.filename\' | translate }}</label>\n      <div class="filename" title="{{ picFile.name }}">{{ picFile.name }}</div>\n    </div>\n    <div class="col-sm-4 mb-sm">\n      <label title="{{ \'modules.upload.field.progress\' | translate }}" class="text-info">{{\n        \'modules.upload.field.progress\' | translate }}</label>\n      <div class="progress">\n        <div class="progress-bar progress-bar-striped" role="progressbar"\n            ng-class="{\'progress-bar-success\': picFile.progress == 100}"\n            ng-style="{width: picFile.progress + \'%\'}">\n          {{ picFile.progress }} %\n        </div>\n      </div>\n      <button class="btn btn-primary btn-sm" type="button" ng-click="uploadFile(picFile, schema.id)"\n              ng-disabled="!picFile || picFile.$error">{{ "buttons.upload" | translate }}\n      </button>\n    </div>\n  </div>\n  <div ng-messages="uploadForm.$error" ng-messages-multiple="">\n    <div class="text-danger errorMsg" ng-message="maxSize">{{ form.schema[picFile.$error].validationMessage | translate }} <strong>{{picFile.$errorParam}}</strong>. ({{ form.schema[picFile.$error].validationMessage2 | translate }} <strong>{{picFile.size / 1000000|number:1}}MB</strong>)</div>\n    <div class="text-danger errorMsg" ng-message="pattern">{{ form.schema[picFile.$error].validationMessage | translate }} <strong>{{picFile.$errorParam}}</strong></div>\n    <div class="text-danger errorMsg" ng-message="maxItems">{{ form.schema[picFile.$error + "ValidationMessage"] | translate }} <strong>{{picFile.$errorParam}}</strong></div>\n    <div class="text-danger errorMsg" ng-message="minItems">{{ form.schema[picFile.$error + "ValidationMessage"] | translate }} <strong>{{picFile.$errorParam}}</strong></div>\n    <div class="text-danger errorMsg" ng-show="errorMsg">{{errorMsg}}</div>\n  </div>\n</script>\n\n<script type=\'text/ng-template\' id="singleFileUpload.html">\n  <div ngf-drop="selectFile(picFile)" ngf-select="selectFile(picFile)" type="file" ngf-multiple="false"\n      ng-model="picFile" name="file"\n      ng-attr-ngf-pattern="{{form.schema.pattern && form.schema.pattern.mimeType ? form.schema.pattern.mimeType : undefined }}"\n      ng-attr-ngf-max-size="{{form.schema.maxSize && form.schema.maxSize.maximum ? form.schema.maxSize.maximum : undefined }}"\n      ng-required="form.required"\n      accept="{{form.schema.pattern && form.schema.pattern.mimeType}}"\n      ng-model-options="form.ngModelOptions" ngf-drag-over-class="dragover" class="drop-box dragAndDropDescription">\n    <p class="text-center">{{ \'modules.upload.descriptionSinglefile\' | translate }}</p>\n  </div>\n  <div ngf-no-file-drop>{{ \'modules.upload.dndNotSupported\' | translate}}</div>\n\n  <button ngf-select="selectFile(picFile)" type="button" ngf-multiple="false" ng-model="picFile" name="file"\n    ng-attr-ngf-pattern="{{form.schema.pattern && form.schema.pattern.mimeType ? form.schema.pattern.mimeType : undefined }}"\n    ng-attr-ngf-max-size="{{form.schema.maxSize && form.schema.maxSize.maximum ? form.schema.maxSize.maximum : undefined }}"\n    ng-required="form.required"\n    accept="{{form.schema.pattern && form.schema.pattern.mimeType}}"\n    ng-model-options="form.ngModelOptions" id="fileInputButton"\n    class="btn btn-primary btn-block {{form.htmlClass}} mt-lg mb">\n      <fa fw="fw" name="upload" class="mr-sm"></fa>\n      {{ "buttons.add" | translate }}\n  </button>\n</script>\n\n<script type=\'text/ng-template\' id="multiFileUpload.html">\n  <div ngf-drop="selectFiles(picFiles)" ngf-select="selectFiles(picFiles)" type="file" ngf-multiple="true"\n    ng-model="picFiles" name="files"\n    ng-attr-ngf-pattern="{{form.schema.pattern && form.schema.pattern.mimeType ? form.schema.pattern.mimeType : undefined }}"\n    ng-attr-ngf-max-size="{{form.schema.maxSize && form.schema.maxSize.maximum ? form.schema.maxSize.maximum : undefined }}"\n    ng-required="form.required"\n    accept="*"\n    ng-model-options="form.ngModelOptions" ngf-drag-over-class="dragover" class="drop-box dragAndDropDescription">\n    <p class="text-center">{{ \'modules.upload.descriptionMultifile\' | translate }}</p>\n  </div>\n  <div ngf-no-file-drop>{{ \'modules.upload.dndNotSupported\' | translate}}</div>\n\n  <button ngf-select="selectFiles(picFiles)" type="button" ngf-multiple="true" multiple ng-model="picFiles" name="files"\n    accept="*"\n    ng-attr-ngf-pattern="{{form.schema.pattern && form.schema.pattern.mimeType ? form.schema.pattern.mimeType : undefined }}"\n    ng-attr-ngf-max-size="{{form.schema.maxSize && form.schema.maxSize.maximum ? form.schema.maxSize.maximum : undefined }}"\n    ng-required="form.required"\n    ng-model-options="form.ngModelOptions" id="fileInputButton"\n    class="btn btn-primary btn-block mt-lg mb">\n     <fa fw="fw" name="upload" class="mr-sm"></fa>\n     {{ "buttons.add" | translate }}\n  </button>\n</script>\n')}]);